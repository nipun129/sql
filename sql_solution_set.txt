1.
SELECT * FROM CITY WHERE COUNTRYCODE = 'USA' AND POPULATION > 100000

2.
SELECT NAME FROM CITY WHERE COUNTRYCODE = 'USA' AND POPULATION > 120000;

3.
SELECT * FROM CITY;

4.
SELECT * FROM CITY WHERE ID = 1661;

5.
SELECT * FROM CITY WHERE COUNTRYCODE = JPN;

6.
SELECT NAME FROM CITY WHERE COUNTRYCODE = JPN;

7.
SELECT CITY,STATE FROM STATION;

8.
SELECT DISTINCT CITY FROM STATION WHERE ID % 2 = 0;

9.
SELECT COUNT(CITY) - COUNT(DISTINCT CITY) FROM STATION;

10.
SELECT  CITY, LENGTH(CITY) AS LEN_MIN FROM STATION ORDER BY LEN_MIN LIMIT 1;
SELECT  CITY, LENGTH(CITY) AS LEN_MAX FROM STATION ORDER BY LEN_MAX DESC LIMIT 1; 

11.
SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP '^[aeiouAEIOU]';

12.
SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP '[aeiouAEIOU]$';

13.
SELECT DISTINCT CITY FROM STATION WHERE CITY NOT REGEXP '^[aeiouAEIOU]';

14.
SELECT DISTINCT CITY FROM STATION WHERE CITY NOT REGEXP '[aeiouAEIOU]$';

15.
SELECT DISTINCT CITY FROM STATION WHERE CITY NOT REGEXP '^[aeiouAEIOU]' OR CITY NOT REGEXP '[aeiouAEIOU]$';

16.
SELECT DISTINCT CITY FROM STATION WHERE CITY NOT REGEXP '^[aeiouAEIOU]' AND CITY NOT REGEXP '[aeiouAEIOU]$';

17.
SELECT product_id, product_name
FROM Product
WHERE product_id NOT IN(SELECT product_id FROM Sales 
WHERE sale_date NOT BETWEEN '2019-01-01' and '2019-03-31');

18.
SELECT DISTINCT viewer_id
from Views WHERE viewer_id = author_id ORDER BY auhor_id;

19.
SELECT round(D2.im_orders*100/D1.del,2) 
FROM 
(SELECT count(delivery_id) as del FROM Delivery) D1,
(SELECT count(delivery_id) as im_orders FROM Delivery WHERE order_date = customer_pref_delivery_date) D2;

20.
select ad_id,
    ifnull(round(sum(action ='Clicked')/sum(action !='ignored') *100,2),0) ctr
from Ads
group by ad_id
order by ctr desc, ad_id;

21.
SELECT employee_id,
       COUNT(team_id) OVER(PARTITION BY team_id) AS team_size
FROM Employee ORDER BY employee_id;

22.
SELECT DISTINCT country_name,
CASE
WHEN (SUM(T.weather_state) OVER(PARTITION BY T.country_name)/COUNT(T.country_name) OVER(PARTITION BY T.country_name)) <= 15 THEN 'Cold'
WHEN (SUM(T.weather_state) OVER(PARTITION BY T.country_name)/COUNT(T.country_name) OVER(PARTITION BY T.country_name)) >= 25 THEN 'Hot'
ELSE 'Warm'
END AS weather_type 
FROM (SELECT C.country_name, W.*
FROM Weather W
INNER JOIN Countries C ON W.country_id = C.country_id WHERE day BETWEEN '2019-11-01' AND '2019-11-30') T;

23.
SELECT DISTINCT TEM.product_id,
round(SUM(TEM.price * TEM.units) OVER(PARTITION BY TEM.product_id)/
SUM(TEM.units) OVER(PARTITION BY TEM.product_id),2) AS average_price 
FROM (SELECT P.*, U.purchase_date, U.units
FROM Prices P
INNER JOIN UnitsSold U ON P.product_id = U.product_id WHERE U.purchase_date between P.start_date AND P.end_date) TEM;

24.
SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY player_id;

25.
SELECT player_id,(SELECT device_id FROM Activity WHERE event_date = TEM.first_login) AS device 
FROM(SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY player_id) TEM;

26.
SELECT * FROM (SELECT DISTINCT T.product_name,
SUM(T.unit) OVER(PARTITION BY T.product_id) AS unit
FROM (SELECT O.*, P.product_name,P.product_category
FROM Orders O
INNER JOIN Products P ON O.product_id = P.product_id WHERE O.order_date between '2020-02-01' AND '2020-02-29') T) B
WHERE B.unit >= 100;

27.
SELECT * FROM Users WHERE REGEXP_LIKE(mail, '^[a-zA-Z][a-zA-Z0-9\_\.\-]*@leetcode.com');

28.
SELECT customer_id,name FROM Customers
WHERE customer_id in (
SELECT O.customer_id
FROM Orders O
INNER JOIN Product P ON O.product_id = P.product_id WHERE order_date BETWEEN '2020-06-01' AND '2020-06-30'
GROUP BY O.customer_id
HAVING SUM(O.quantity*P.price) >= 100)
AND customer_id in (
SELECT O.customer_id
FROM Orders O
INNER JOIN Product P ON O.product_id = P.product_id WHERE order_date BETWEEN '2020-07-01' AND '2020-07-31'
GROUP BY O.customer_id
HAVING SUM(O.quantity*P.price) >= 100);

29.
SELECT DISTINCT title 
FROM Content C
INNER JOIN TVProgram T ON C.content_id = T.content_id WHERE T.program_date BETWEEN '2020-06-01' AND '2020-06-30'
AND C.content_type = 'Movies' AND C.Kids_content = 'Y';

30.
SELECT Q.id,Q.year,coalesce(N.npv,0)
FROM Queries Q
LEFT JOIN NPV N ON Q.id = N.id AND Q.year = N.year;

31.
SELECT Q.id,Q.year,coalesce(N.npv,0)
FROM Queries Q
LEFT JOIN NPV N ON Q.id = N.id AND Q.year = N.year;

32.
SELECT U.unique_id,E.name
FROM Employees E
LEFT JOIN EmployeeUNI U ON E.id = U.id;

33.
SELECT U.name,M.travelled_distance 
FROM (SELECT user_id,SUM(distance) AS travelled_distance FROM Rides GROUP BY user_id) M
RIGHT JOIN Users U ON U.id = M.user_id 
ORDER BY M.travelled_distance desc,U.name;

34.
SELECT * FROM (SELECT DISTINCT T.product_name,
SUM(T.unit) OVER(PARTITION BY T.product_id) AS unit
FROM (SELECT O.*, P.product_name,P.product_category
FROM Orders O
INNER JOIN Products P ON O.product_id = P.product_id WHERE O.order_date between '2020-02-01' AND '2020-02-29') T) B
WHERE B.unit >= 100;

35.
SELECT name FROM (SELECT user_id,COUNT(user_id) AS tot_rat FROM MovieRating GROUP BY user_id) U
INNER JOIN Users Us ON U.user_id = Us.user_id ORDER BY U.tot_rat desc,Us.name limit 1
UNION
SELECT title FROM (SELECT movie_id,SUM(rating)/COUNT(rating) AS avg_rat FROM MovieRating WHERE left(created_at,7)='2020-02' 
GROUP BY movie_id) R
INNER JOIN Movies M ON M.movie_id = R.movie_id ORDER BY R.avg_rat desc,M.title limit 1;

36.
SELECT U.name,M.travelled_distance 
FROM (SELECT user_id,SUM(distance) AS travelled_distance FROM Rides GROUP BY user_id) M
RIGHT JOIN Users U ON U.id = M.user_id 
ORDER BY M.travelled_distance desc,U.name;

37.
SELECT U.unique_id,E.name
FROM Employees E
LEFT JOIN EmployeeUNI U ON E.id = U.id;

38.
SELECT S.id,S.name FROM Students S
LEFT JOIN Departments D ON S.department_id = D.id
WHERE D.name IS NULL;

39.
WITH CallTable AS (
    SELECT CASE WHEN from_id < to_id THEN from_id ELSE to_id END AS person1,
    CASE WHEN from_id > to_id THEN from_id ELSE to_id END AS person2,
    duration
    FROM Calls
)
SELECT person1,person2,count(person1) AS call_count,sum(duration) AS total_duration
FROM CallTable GROUP BY person1,person2;

40.
SELECT DISTINCT TEM.product_id,
round(SUM(TEM.price * TEM.units) OVER(PARTITION BY TEM.product_id)/
SUM(TEM.units) OVER(PARTITION BY TEM.product_id),2) AS average_price 
FROM (SELECT P.*, U.purchase_date, U.units
FROM Prices P
INNER JOIN UnitsSold U ON P.product_id = U.product_id WHERE U.purchase_date between P.start_date AND P.end_date) TEM;

41.
SELECT W.name,SUM(W.units*P.Width*P.Length*P.Height) AS volume
FROM Warehouse W
LEFT JOIN Products P ON W.product_id = P.product_id
GROUP BY W.name;

42.
SELECT S1.sale_date,(S1.sold_num-S2.sold_num) AS DIFF
FROM Sales S1
INNER JOIN Sales S2 ON S1.sale_date = S2.sale_date AND S1.fruit = 'apples' AND S2.fruit = 'oranges';

43.
WITH cte AS (
SELECT player_id, MIN(event_date) as first_login
FROM Activity
GROUP BY player_id
)

SELECT ROUND(SUM(CASE WHEN DATEDIFF(event_date, first_login)=1 THEN 1 ELSE 0  END) / COUNT(DISTINCT cte.player_id), 2) as fraction
FROM Activity as a
JOIN cte 
ON a.player_id = cte.player_id


44.
SELECT T.name FROM (SELECT E1.id,E1.name,E2.name as emp_name,E2.managerId
FROM Employee E1
INNER JOIN Employee E2 ON E1.id = E2.managerId) T GROUP BY T.name HAVING COUNT(T.name)>=5;

45.
SELECT D.dept_name,coalesce(S.student_number,0)
FROM Department D
LEFT JOIN (SELECT dept_id,COUNT(dept_id) AS student_number FROM Student GROUP BY dept_id) S ON
D.dept_id = S.dept_id;

46.
SELECT customer_id FROM Customer GROUP BY customer_id HAVING COUNT(product_key)=(SELECT Count(*) FROM Product);

47.
SELECT Q.project_id,Q.employee_id FROM (SELECT *,rank()over(partition by T.project_id order by experience_years desc) AS r
FROM (SELECT P.project_id,P.employee_id,E.experience_years
FROM Employee E
INNER JOIN Project P ON E.employee_id = P.employee_id GROUP BY P.project_id,P.employee_id ORDER BY E.experience_years desc) T
ORDER BY r) Q WHERE Q.r = 1;

48.
SELECT B.book_id,B.name
FROM Books B
LEFT JOIN Orders O ON B.book_id = O.Book_id
AND O.dispatch_date BETWEEN '2019-06-23'AND '2018-06-23'
WHERE DATEDIFF('2019-06-23',B.available_from) > 30
GROUP BY book_id
HAVING Sum(IFNULL(O.quantity, 0)) < 10 ;

49.
SELECT student_id,course_id,grade FROM (SELECT *,rank() over(partition by student_id order by grade desc,course_id) as rank_num
FROM Enrollments) M WHERE M.rank_num = 1;

50.
Question incomplete

51.
SELECT name,population,area FROM World WHERE area >= 3000000 OR population >= 25000000;

52.
SELECT A.name FROM (SELECT id,name,coalesce(referee_id,0) AS referee_id FROM Customer) A WHERE referee_id != 2;

53.
SELECT name FROM Customers WHERE id NOT IN (SELECT customerId as id FROM Orders);

54.
SELECT employee_id,COUNT(team_id) OVER(PARTITION by team_id) FROM Employee ORDER BY employee_id

55.
SELECT P.*,C.* 
FROM Person P
INNER JOIN Country C ON SUBSTRING(P.phone_number, 1, 3) = C.country_code;

SELECT C.name 
FROM Country C
INNER JOIN Person P ON SUBSTRING(P.phone_number, 1, 3) = C.country_code
INNER JOIN (select caller_id as id, duration from Calls 
union all 
select callee_id as id, duration from Calls) PHN
ON P.id = PHN.id
GROUP BY C.name
HAVING AVG(duration) > (SELECT AVG(duration) FROM Calls);
;

56.
SELECT player_id,device_id FROM 
(SELECT player_id,device_id, rank() OVER(PARTITION BY player_id ORDER BY event_date) AS rnk FROM Activity) TEMP
WHERE TEMP.rnk = 1;

57.
SELECT customer_number FROM (SELECT customer_number,COUNT(customer_number) as total_orders
FROM Orders GROUP BY customer_number ORDER BY total_orders desc) TEMP limit 1;

follow up:
SELECT customer_number FROM (SELECT customer_number,total_orders,RANK() OVER(ORDER BY total_orders desc) AS rnk FROM (SELECT customer_number,COUNT(customer_number) as total_orders
FROM Orders GROUP BY customer_number ORDER BY total_orders desc) T) T2 WHERE rnk = 1;

58.
SELECT 
     DISTINCT(a.seat_id) 
FROM Cinema a 
INNER JOIN Cinema b 
ON abs(a.seat_id - b.seat_id) = 1 
WHERE a.free = 1 and b.free = 1 
ORDER BY a.seat_id

59.
SELECT name FROM SalesPerson WHERE sales_id NOT IN (SELECT S.sales_id
FROM SalesPerson S
INNER JOIN Orders O ON S.sales_id = O.sales_id
INNER JOIN Company C ON O.com_id = C.com_id
WHERE C.name = 'RED');

60.
SELECT *,
CASE WHEN (x+y)>=z AND (y+z)>=x AND (z+x)>=y THEN 'Yes'
ELSE 'No' END AS triangle 
FROM Triangle

61.
SELECT MIN(abs(p2.x - p1.x)) shortest
FROM Point p1 JOIN Point p2
ON p1.x != p2.x

62.
SELECT actor_id,director_id FROM (SELECT A.actor_id,D.director_id,COUNT(DISTINCT A.timestamp) AS counts
FROM ActorDirector A
INNER JOIN ActorDirector D ON A.actor_id = D.actor_id AND A.director_id = D.director_id
GROUP BY A.actor_id,D.director_id) T WHERE counts >= 3;

63.

