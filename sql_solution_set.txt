1.
SELECT * FROM CITY WHERE COUNTRYCODE = 'USA' AND POPULATION > 100000

2.
SELECT NAME FROM CITY WHERE COUNTRYCODE = 'USA' AND POPULATION > 120000;

3.
SELECT * FROM CITY;

4.
SELECT * FROM CITY WHERE ID = 1661;

5.
SELECT * FROM CITY WHERE COUNTRYCODE = JPN;

6.
SELECT NAME FROM CITY WHERE COUNTRYCODE = JPN;

7.
SELECT CITY,STATE FROM STATION;

8.
SELECT DISTINCT CITY FROM STATION WHERE ID % 2 = 0;

9.
SELECT COUNT(CITY) - COUNT(DISTINCT CITY) FROM STATION;

10.
SELECT  CITY, LENGTH(CITY) AS LEN_MIN FROM STATION ORDER BY LEN_MIN LIMIT 1;
SELECT  CITY, LENGTH(CITY) AS LEN_MAX FROM STATION ORDER BY LEN_MAX DESC LIMIT 1; 

11.
SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP '^[aeiouAEIOU]';

12.
SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP '[aeiouAEIOU]$';

13.
SELECT DISTINCT CITY FROM STATION WHERE CITY NOT REGEXP '^[aeiouAEIOU]';

14.
SELECT DISTINCT CITY FROM STATION WHERE CITY NOT REGEXP '[aeiouAEIOU]$';

15.
SELECT DISTINCT CITY FROM STATION WHERE CITY NOT REGEXP '^[aeiouAEIOU]' OR CITY NOT REGEXP '[aeiouAEIOU]$';

16.
SELECT DISTINCT CITY FROM STATION WHERE CITY NOT REGEXP '^[aeiouAEIOU]' AND CITY NOT REGEXP '[aeiouAEIOU]$';

17.
SELECT product_id, product_name
FROM Product
WHERE product_id NOT IN(SELECT product_id FROM Sales 
WHERE sale_date NOT BETWEEN '2019-01-01' and '2019-03-31');

18.
SELECT DISTINCT viewer_id
from Views WHERE viewer_id = author_id ORDER BY auhor_id;

19.
SELECT round(D2.im_orders*100/D1.del,2) 
FROM 
(SELECT count(delivery_id) as del FROM Delivery) D1,
(SELECT count(delivery_id) as im_orders FROM Delivery WHERE order_date = customer_pref_delivery_date) D2;

20.
select ad_id,
    ifnull(round(sum(action ='Clicked')/sum(action !='ignored') *100,2),0) ctr
from Ads
group by ad_id
order by ctr desc, ad_id;

21.
SELECT employee_id,
       COUNT(team_id) OVER(PARTITION BY team_id) AS team_size
FROM Employee ORDER BY employee_id;

22.
SELECT DISTINCT country_name,
CASE
WHEN (SUM(T.weather_state) OVER(PARTITION BY T.country_name)/COUNT(T.country_name) OVER(PARTITION BY T.country_name)) <= 15 THEN 'Cold'
WHEN (SUM(T.weather_state) OVER(PARTITION BY T.country_name)/COUNT(T.country_name) OVER(PARTITION BY T.country_name)) >= 25 THEN 'Hot'
ELSE 'Warm'
END AS weather_type 
FROM (SELECT C.country_name, W.*
FROM Weather W
INNER JOIN Countries C ON W.country_id = C.country_id WHERE day BETWEEN '2019-11-01' AND '2019-11-30') T;

23.
SELECT DISTINCT TEM.product_id,
round(SUM(TEM.price * TEM.units) OVER(PARTITION BY TEM.product_id)/
SUM(TEM.units) OVER(PARTITION BY TEM.product_id),2) AS average_price 
FROM (SELECT P.*, U.purchase_date, U.units
FROM Prices P
INNER JOIN UnitsSold U ON P.product_id = U.product_id WHERE U.purchase_date between P.start_date AND P.end_date) TEM;

24.
SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY player_id;

25.
SELECT player_id,(SELECT device_id FROM Activity WHERE event_date = TEM.first_login) AS device 
FROM(SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY player_id) TEM;

26.
SELECT * FROM (SELECT DISTINCT T.product_name,
SUM(T.unit) OVER(PARTITION BY T.product_id) AS unit
FROM (SELECT O.*, P.product_name,P.product_category
FROM Orders O
INNER JOIN Products P ON O.product_id = P.product_id WHERE O.order_date between '2020-02-01' AND '2020-02-29') T) B
WHERE B.unit >= 100;

27.
SELECT * FROM Users WHERE REGEXP_LIKE(mail, '^[a-zA-Z][a-zA-Z0-9\_\.\-]*@leetcode.com');

28.
SELECT customer_id,name FROM Customers
WHERE customer_id in (
SELECT O.customer_id
FROM Orders O
INNER JOIN Product P ON O.product_id = P.product_id WHERE order_date BETWEEN '2020-06-01' AND '2020-06-30'
GROUP BY O.customer_id
HAVING SUM(O.quantity*P.price) >= 100)
AND customer_id in (
SELECT O.customer_id
FROM Orders O
INNER JOIN Product P ON O.product_id = P.product_id WHERE order_date BETWEEN '2020-07-01' AND '2020-07-31'
GROUP BY O.customer_id
HAVING SUM(O.quantity*P.price) >= 100);

29.
SELECT DISTINCT title 
FROM Content C
INNER JOIN TVProgram T ON C.content_id = T.content_id WHERE T.program_date BETWEEN '2020-06-01' AND '2020-06-30'
AND C.content_type = 'Movies' AND C.Kids_content = 'Y';

30.
SELECT Q.id,Q.year,coalesce(N.npv,0)
FROM Queries Q
LEFT JOIN NPV N ON Q.id = N.id AND Q.year = N.year;

31.
SELECT Q.id,Q.year,coalesce(N.npv,0)
FROM Queries Q
LEFT JOIN NPV N ON Q.id = N.id AND Q.year = N.year;

32.
SELECT U.unique_id,E.name
FROM Employees E
LEFT JOIN EmployeeUNI U ON E.id = U.id;

33.
SELECT U.name,M.travelled_distance 
FROM (SELECT user_id,SUM(distance) AS travelled_distance FROM Rides GROUP BY user_id) M
RIGHT JOIN Users U ON U.id = M.user_id 
ORDER BY M.travelled_distance desc,U.name;

34.
SELECT * FROM (SELECT DISTINCT T.product_name,
SUM(T.unit) OVER(PARTITION BY T.product_id) AS unit
FROM (SELECT O.*, P.product_name,P.product_category
FROM Orders O
INNER JOIN Products P ON O.product_id = P.product_id WHERE O.order_date between '2020-02-01' AND '2020-02-29') T) B
WHERE B.unit >= 100;

35.
SELECT name FROM (SELECT user_id,COUNT(user_id) AS tot_rat FROM MovieRating GROUP BY user_id) U
INNER JOIN Users Us ON U.user_id = Us.user_id ORDER BY U.tot_rat desc,Us.name limit 1
UNION
SELECT title FROM (SELECT movie_id,SUM(rating)/COUNT(rating) AS avg_rat FROM MovieRating WHERE left(created_at,7)='2020-02' 
GROUP BY movie_id) R
INNER JOIN Movies M ON M.movie_id = R.movie_id ORDER BY R.avg_rat desc,M.title limit 1;

36.
SELECT U.name,M.travelled_distance 
FROM (SELECT user_id,SUM(distance) AS travelled_distance FROM Rides GROUP BY user_id) M
RIGHT JOIN Users U ON U.id = M.user_id 
ORDER BY M.travelled_distance desc,U.name;

37.
SELECT U.unique_id,E.name
FROM Employees E
LEFT JOIN EmployeeUNI U ON E.id = U.id;

38.
SELECT S.id,S.name FROM Students S
LEFT JOIN Departments D ON S.department_id = D.id
WHERE D.name IS NULL;

39.
WITH CallTable AS (
    SELECT CASE WHEN from_id < to_id THEN from_id ELSE to_id END AS person1,
    CASE WHEN from_id > to_id THEN from_id ELSE to_id END AS person2,
    duration
    FROM Calls
)
SELECT person1,person2,count(person1) AS call_count,sum(duration) AS total_duration
FROM CallTable GROUP BY person1,person2;

40.
SELECT DISTINCT TEM.product_id,
round(SUM(TEM.price * TEM.units) OVER(PARTITION BY TEM.product_id)/
SUM(TEM.units) OVER(PARTITION BY TEM.product_id),2) AS average_price 
FROM (SELECT P.*, U.purchase_date, U.units
FROM Prices P
INNER JOIN UnitsSold U ON P.product_id = U.product_id WHERE U.purchase_date between P.start_date AND P.end_date) TEM;

41.
SELECT W.name,SUM(W.units*P.Width*P.Length*P.Height) AS volume
FROM Warehouse W
LEFT JOIN Products P ON W.product_id = P.product_id
GROUP BY W.name;

42.
SELECT S1.sale_date,(S1.sold_num-S2.sold_num) AS DIFF
FROM Sales S1
INNER JOIN Sales S2 ON S1.sale_date = S2.sale_date AND S1.fruit = 'apples' AND S2.fruit = 'oranges';

43.
WITH cte AS (
SELECT player_id, MIN(event_date) as first_login
FROM Activity
GROUP BY player_id
)

SELECT ROUND(SUM(CASE WHEN DATEDIFF(event_date, first_login)=1 THEN 1 ELSE 0  END) / COUNT(DISTINCT cte.player_id), 2) as fraction
FROM Activity as a
JOIN cte 
ON a.player_id = cte.player_id


44.
SELECT T.name FROM (SELECT E1.id,E1.name,E2.name as emp_name,E2.managerId
FROM Employee E1
INNER JOIN Employee E2 ON E1.id = E2.managerId) T GROUP BY T.name HAVING COUNT(T.name)>=5;

45.
SELECT D.dept_name,coalesce(S.student_number,0)
FROM Department D
LEFT JOIN (SELECT dept_id,COUNT(dept_id) AS student_number FROM Student GROUP BY dept_id) S ON
D.dept_id = S.dept_id;

46.
SELECT customer_id FROM Customer GROUP BY customer_id HAVING COUNT(product_key)=(SELECT Count(*) FROM Product);

47.
SELECT Q.project_id,Q.employee_id FROM (SELECT *,rank()over(partition by T.project_id order by experience_years desc) AS r
FROM (SELECT P.project_id,P.employee_id,E.experience_years
FROM Employee E
INNER JOIN Project P ON E.employee_id = P.employee_id GROUP BY P.project_id,P.employee_id ORDER BY E.experience_years desc) T
ORDER BY r) Q WHERE Q.r = 1;

48.
SELECT B.book_id,B.name
FROM Books B
LEFT JOIN Orders O ON B.book_id = O.Book_id
AND O.dispatch_date BETWEEN '2019-06-23'AND '2018-06-23'
WHERE DATEDIFF('2019-06-23',B.available_from) > 30
GROUP BY book_id
HAVING Sum(IFNULL(O.quantity, 0)) < 10 ;

49.
SELECT student_id,course_id,grade FROM (SELECT *,rank() over(partition by student_id order by grade desc,course_id) as rank_num
FROM Enrollments) M WHERE M.rank_num = 1;

50.
Question incomplete

51.
SELECT name,population,area FROM World WHERE area >= 3000000 OR population >= 25000000;

52.
SELECT A.name FROM (SELECT id,name,coalesce(referee_id,0) AS referee_id FROM Customer) A WHERE referee_id != 2;

53.
SELECT name FROM Customers WHERE id NOT IN (SELECT customerId as id FROM Orders);

54.
SELECT employee_id,COUNT(team_id) OVER(PARTITION by team_id) FROM Employee ORDER BY employee_id

55.
SELECT P.*,C.* 
FROM Person P
INNER JOIN Country C ON SUBSTRING(P.phone_number, 1, 3) = C.country_code;

SELECT C.name 
FROM Country C
INNER JOIN Person P ON SUBSTRING(P.phone_number, 1, 3) = C.country_code
INNER JOIN (select caller_id as id, duration from Calls 
union all 
select callee_id as id, duration from Calls) PHN
ON P.id = PHN.id
GROUP BY C.name
HAVING AVG(duration) > (SELECT AVG(duration) FROM Calls);
;

56.
SELECT player_id,device_id FROM 
(SELECT player_id,device_id, rank() OVER(PARTITION BY player_id ORDER BY event_date) AS rnk FROM Activity) TEMP
WHERE TEMP.rnk = 1;

57.
SELECT customer_number FROM (SELECT customer_number,COUNT(customer_number) as total_orders
FROM Orders GROUP BY customer_number ORDER BY total_orders desc) TEMP limit 1;

follow up:
SELECT customer_number FROM (SELECT customer_number,total_orders,RANK() OVER(ORDER BY total_orders desc) AS rnk FROM (SELECT customer_number,COUNT(customer_number) as total_orders
FROM Orders GROUP BY customer_number ORDER BY total_orders desc) T) T2 WHERE rnk = 1;

58.
SELECT 
     DISTINCT(a.seat_id) 
FROM Cinema a 
INNER JOIN Cinema b 
ON abs(a.seat_id - b.seat_id) = 1 
WHERE a.free = 1 and b.free = 1 
ORDER BY a.seat_id

59.
SELECT name FROM SalesPerson WHERE sales_id NOT IN (SELECT S.sales_id
FROM SalesPerson S
INNER JOIN Orders O ON S.sales_id = O.sales_id
INNER JOIN Company C ON O.com_id = C.com_id
WHERE C.name = 'RED');

60.
SELECT *,
CASE WHEN (x+y)>=z AND (y+z)>=x AND (z+x)>=y THEN 'Yes'
ELSE 'No' END AS triangle 
FROM Triangle

61.
SELECT MIN(abs(p2.x - p1.x)) shortest
FROM Point p1 JOIN Point p2
ON p1.x != p2.x

62.
SELECT actor_id,director_id FROM (SELECT A.actor_id,D.director_id,COUNT(DISTINCT A.timestamp) AS counts
FROM ActorDirector A
INNER JOIN ActorDirector D ON A.actor_id = D.actor_id AND A.director_id = D.director_id
GROUP BY A.actor_id,D.director_id) T WHERE counts >= 3;

63.
SELECT P.product_name,S.year,S.price
FROM Sales S
INNER JOIN Product P ON S.product_id = P.product_id;

64.
SELECT P.project_id,ROUND(SUM(E.experience_years)/COUNT(P.project_id),2)
FROM Project P
INNER JOIN Employee E ON P.employee_id = E.employee_id
GROUP BY P.project_id;

65.
SELECT M.seller_id FROM (SELECT seller_id,SUM(price) AS tot FROM Sales GROUP BY seller_id ORDER BY tot desc) M
JOIN 
(SELECT seller_id,SUM(price) AS tot FROM Sales GROUP BY seller_id ORDER BY tot desc) N
ON M.seller_id != N.seller_id AND M.tot = N.tot;

66.
SELECT S.buyer_id
FROM Sales S
INNER JOIN Product P ON S.product_id = P.product_id
WHERE P.product_name = 'S8' AND P.product_name != 'IiPhone'

67.
WITH RESULT AS
(SELECT visited_on,SUM(amount) as amount FROM Customer GROUP BY visited_on),
RESULT2 AS 
(
SELECT 
visited_on,
SUM(amount) OVER(ORDER BY visited_on ROWS BETWEEN 6 PRECEDING and CURRENT ROW) as amount,
ROUND(AVG(amount) OVER(ORDER BY visited_on ROWS BETWEEN 6 PRECEDING and CURRENT ROW),2) AS average_amount,
DENSE_RANK() OVER(ORDER BY visited_on) as rnk FROM RESULT
)
SELECT visited_on,amount,average_amount 
FROM RESULT2
WHERE rnk > 6;

68.
SELECT gender,day,SUM(score_points) 
OVER(PARTITION BY gender ORDER BY day) as total
FROM Scores

69.
SELECT min(log_id) AS start_id, max(log_id) AS end_id
FROM (SELECT l.log_id, (l.log_id - l.row_num) AS diff
      FROM (SELECT log_id, row_number() over() AS row_num FROM Logs) L
      ) L2
GROUP BY diff;

70.
SELECT St.*,Su.*,COUNT(E.subject_name) AS attended_exams
FROM Students St
JOIN Subjects Su
LEFT JOIN Examinations E ON St.student_id = E.student_id AND Su.subject_name = E.subject_name
GROUP BY St.student_id,Su.subject_name ;

71.
SELECT E1.employee_id
FROM Employees E1
LEFT JOIN Employees E2 ON E1.manager_id = E2.employee_id 
LEFT JOIN Employees E3 ON E2.manager_id = E3.employee_id
LEFT JOIN Employees E4 ON E3.manager_id = E4.employee_id
WHERE E1.employee_id != 1 AND E4.employee_id = 1;

72.
SELECT DATE_FORMAT(trans_date, '%Y-%m') AS month,country,count(state) AS trans_count,
sum(CASE WHEN state='approved' THEN 1  ELSE 0 END) AS approved_count,
sum(amount) AS trans_total_amount,
sum(CASE WHEN state='approved' THEN amount ELSE 0 END) AS approved_count
FROM Transactions GROUP BY month,country;

73.
SELECT ROUND(AVG(Q.average_percent),2) AS average_daily_percent FROM (SELECT ROUND((100*P.removed_post/T.total_post),2) AS average_percent
FROM (SELECT action_date,COUNT(post_id) AS total_post FROM Actions WHERE extra ='spam' GROUP BY action_date) T,
(SELECT action_date,count(A.post_id) AS removed_post
FROM Actions A
INNER JOIN Removals R ON A.post_id = R.post_id AND A.extra = 'spam' GROUP BY action_date) P
WHERE T.action_date = P.action_date) Q;

74.
WITH cte AS (
SELECT player_id, MIN(event_date) as first_login
FROM Activity
GROUP BY player_id
)

SELECT ROUND(SUM(CASE WHEN DATEDIFF(event_date, first_login)=1 THEN 1 ELSE 0  END) / COUNT(DISTINCT cte.player_id), 2) as fraction
FROM Activity as a
JOIN cte 
ON a.player_id = cte.player_id

75.
WITH cte AS (
SELECT player_id, MIN(event_date) as first_login
FROM Activity
GROUP BY player_id
)

SELECT ROUND(SUM(CASE WHEN DATEDIFF(event_date, first_login)=1 THEN 1 ELSE 0  END) / COUNT(DISTINCT cte.player_id), 2) as fraction
FROM Activity as a
JOIN cte 
ON a.player_id = cte.player_id

76.
SELECT S1.*,ROUND(S2.post_tax_sal * S1.salary) AS salary
FROM Salaries S1
INNER JOIN 
(SELECT company_id,MAX(salary) AS max_salary,
CASE
WHEN MAX(salary) < 1000 THEN 1.0
WHEN MAX(salary) >= 1000 AND MAX(salary) <= 10000 THEN 0.76
ELSE 0.51 END AS post_tax_sal
FROM Salaries GROUP BY company_id) S2 ON S1.company_id = S2.company_id;

77.
SELECT E.*,V.*
FROM Expressions E
JOIN Variables V;

SELECT E.left_operand,E.operator,E.right_operand,
CASE
WHEN E.operator = '<' THEN IF(L.value < R.value,'true','false')
WHEN E.operator = '>' THEN IF(L.value > R.value,'true','false')
ELSE IF (L.value = R.value, 'true','false')
END AS value
FROM Expressions E
LEFT JOIN Variables L ON E.left_operand = L.name
LEFT JOIN Variables R ON E.right_operand = R.name;

78.
SELECT C.name 
FROM Country C
INNER JOIN Person P ON SUBSTRING(P.phone_number, 1, 3) = C.country_code
INNER JOIN (select caller_id as id, duration from Calls 
union all 
select callee_id as id, duration from Calls) PHN
ON P.id = PHN.id
GROUP BY C.name
HAVING AVG(duration) > (SELECT AVG(duration) FROM Calls);

79.
SELECT name FROM Employee ORDER BY name;

80.
SELECT T.year,T.product_id,T.spend AS curr_year_spend,
LAG(T.spend) OVER(PARTITION BY T.product_id) AS prev_year_spend,
ROUND(100*(T.spend - LAG(T.spend) OVER(PARTITION BY T.product_id))/LAG(T.spend) OVER(PARTITION BY T.product_id),2)
AS yoy_rate
FROM (SELECT transaction_id,product_id,spend,EXTRACT(YEAR FROM transaction_date) AS year
FROM user_transactions ORDER BY product_id) T;

81.
SELECT T.item_type,
CASE
WHEN T.item_type = 'prime_eligible' THEN (500000/T.area)*T.count
ELSE ((500000)-(500000/(SELECT SUM(square_footage) FROM inventory WHERE T.item_type = 'prime_eligible'))*
(SELECT count(T.item_type) FROM inventory WHERE T.item_type = 'prime_eligible')) 
END AS item_count
FROM
(SELECT item_type,sum(square_footage) AS area,
count(item_type) AS count
FROM inventory GROUP BY item_type) T 
GROUP BY T.item_type;

82.
WITH user_action AS (SELECT user_id,event_id,event_type,EXTRACT(MONTH FROM event_date) AS month FROM user_actions)
SELECT u2.month,COUNT(u2.user_id) AS monthly_active_users
FROM user_action u1
INNER JOIN user_action u2 ON u1.month = u2.month - 1 AND u1.user_id = u2.user_id
GROUP BY u2.month,u2.user_id;

83.
SELECT AVG(dd.searches) as median_val
FROM (
SELECT d.searches, @rownum:=@rownum+1 as `row_number`, @total_rows:=@rownum
  FROM search_frequency d, (SELECT @rownum:=0) r
  WHERE d.searches is NOT NULL
  -- put some where clause here
  ORDER BY d.searches
) as dd
WHERE dd.row_number IN ( FLOOR((@total_rows+1)/2), FLOOR((@total_rows+2)/2) );

84.
WITH payment_status AS (
SELECT
  advertiser.user_id,
  advertiser.status,
  payment.paid
FROM advertiser
LEFT JOIN daily_pay AS payment
  ON advertiser.user_id = payment.user_id

UNION

SELECT
  payment.user_id,
  advertiser.status,
  payment.paid
FROM daily_pay AS payment
LEFT JOIN advertiser
  ON advertiser.user_id = payment.user_id
)
SELECT user_id,
CASE
WHEN paid IS NULL THEN 'CHURN'
WHEN status != 'CHURN' AND paid IS NOT NULL THEN 'EXISTING'
WHEN status = 'CHURN' AND paid IS NOT NULL THEN 'RESURRECT'
WHEN status IS NULL THEN 'NEW'
END AS new_status
FROM payment_status
ORDER BY user_id;

85.
WITH Server AS 
(SELECT S1.server_id,S1.status_time AS start_time,S2.status_time AS stop_time
FROM server_utilization S1
INNER JOIN server_utilization S2 ON S1.server_id = S2.server_id 
AND S1.session_status != S2.session_status 
AND S1.session_status = 'start')
SELECT SUM(round(TIMESTAMPDIFF(SECOND,start_time,stop_time)/86400)) AS total_uptime_days FROM Server;

86.
WITH CTE AS (SELECT T1.*,TIMESTAMPDIFF(MINUTE,T2.transaction_timestamp,T1.transaction_timestamp)
FROM transactions T1
JOIN transactions T2 ON T1.merchant_id = T2.merchant_id AND
T1.credit_card_id = T2.credit_card_id AND T1.amount = T2.amount
AND TIMESTAMPDIFF(SECOND,T2.transaction_timestamp,T1.transaction_timestamp) > 1 AND
TIMESTAMPDIFF(SECOND,T2.transaction_timestamp,T1.transaction_timestamp) <= 600) 
SELECT COUNT(*) AS payment_count FROM CTE;

87.
WITH experience AS (SELECT C.*,M.trip_id,M.order_timestamp,
ROUND(TIMESTAMPDIFF(SECOND,C.signup_timestamp,M.order_timestamp)/86400) AS days_since
FROM customers C
INNER JOIN (SELECT O.customer_id,O.trip_id,O.status,O.order_timestamp
FROM orders O
INNER JOIN trips T ON O.trip_id=T.trip_id AND O.status != 'completed successfully') M ON
C.customer_id = M.customer_id AND EXTRACT(MONTH FROM C.signup_timestamp)= 6), exp2 AS(
SELECT COUNT(*) AS tot_unhappy_cust FROM experience),exp3 AS (SELECT COUNT(*) AS unhappy_cust FROM experience WHERE days_since <= 14)
SELECT ROUND((100*unhappy_cust)/tot_unhappy_cust,2) AS bad_experience_pct FROM exp2,exp3;

88.
SELECT
    gender,
    day,
    SUM(score_points) OVER(PARTITION BY gender ORDER BY day) as total
FROM Scores

89.
SELECT C.name 
FROM Country C
INNER JOIN Person P ON SUBSTRING(P.phone_number, 1, 3) = C.country_code
INNER JOIN (select caller_id as id, duration from Calls 
union all 
select callee_id as id, duration from Calls) PHN
ON P.id = PHN.id
GROUP BY C.name
HAVING AVG(duration) > (SELECT AVG(duration) FROM Calls);

90.


91.
select department_salary.pay_month, department_id,
    case
        when department_avg>company_avg then 'higher'
        when department_avg<company_avg then 'lower'
        else 'same'
    end as comparison
from
    (
      select department_id, avg(amount) as department_avg, date_format(pay_date, '%Y-%m') as pay_month
      from Salary join Employee on Salary.employee_id = Employee.employee_id
      group by department_id, pay_month
    ) as department_salary
join
    (
      select avg(amount) as company_avg,  date_format(pay_date, '%Y-%m') as pay_month 
        from Salary 
        group by date_format(pay_date, '%Y-%m')
    ) as company_salary
on department_salary.pay_month = company_salary.pay_month

92.
select t1.install_date as install_dt, count(t1.install_date) as installs,
    round(count(t2.event_date) / count(*), 2) as Day1_retention
from (
    select player_id, min(event_date) as install_date
    from Activity
    group by 1
) t1
left join Activity t2 
on date_add(t1.install_date, interval 1 day) = t2.event_date
    and t1.player_id = t2.player_id
group by 1
order by 1

93..
WITH Play AS (SELECT P.group_id,M.first_player AS player,M.first_score AS score
FROM Players P
JOIN Matches M ON P.player_id=M.first_player
UNION
SELECT P.group_id,M.second_player AS player,M.second_score AS score
FROM Players P
JOIN Matches M ON P.player_id=M.second_player)
SELECT N.group_id, N.player AS player_id 
FROM (Select group_id,player,SUM(score),dense_rank() over(partition by group_id order by SUM(score) desc,player) AS rnk
FROM Play GROUP BY player,group_id ORDER BY group_id,player) N
WHERE N.rnk = 1;

94.
WITH Study AS (SELECT exam_id,student_id,student_name,score,
MAX(score) OVER(PARTITION BY exam_id) AS score_max,
MIN(score) OVER(PARTITION BY exam_id) AS score_min
FROM (SELECT E.exam_id,E.student_id,E.score,S.student_name
FROM Exam E
INNER JOIN Student S ON E.student_id = S.student_id) B)
SELECT DISTINCT student_name,student_name FROM Study WHERE student_name NOT IN (SELECT DISTINCT student_name FROM Study
WHERE score=score_max OR score=score_min);

95.
WITH Study AS (SELECT exam_id,student_id,student_name,score,
MAX(score) OVER(PARTITION BY exam_id) AS score_max,
MIN(score) OVER(PARTITION BY exam_id) AS score_min
FROM (SELECT E.exam_id,E.student_id,E.score,S.student_name
FROM Exam E
INNER JOIN Student S ON E.student_id = S.student_id) B)
SELECT DISTINCT student_name,student_name FROM Study WHERE student_name NOT IN (SELECT DISTINCT student_name FROM Study
WHERE score=score_max OR score=score_min);

96.

