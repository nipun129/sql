1.
SELECT * FROM CITY WHERE COUNTRYCODE = 'USA' AND POPULATION > 100000

2.
SELECT NAME FROM CITY WHERE COUNTRYCODE = 'USA' AND POPULATION > 120000;

3.
SELECT * FROM CITY;

4.
SELECT * FROM CITY WHERE ID = 1661;

5.
SELECT * FROM CITY WHERE COUNTRYCODE = JPN;

6.
SELECT NAME FROM CITY WHERE COUNTRYCODE = JPN;

7.
SELECT CITY,STATE FROM STATION;

8.
SELECT DISTINCT CITY FROM STATION WHERE ID % 2 = 0;

9.
SELECT COUNT(CITY) - COUNT(DISTINCT CITY) FROM STATION;

10.
SELECT  CITY, LENGTH(CITY) AS LEN_MIN FROM STATION ORDER BY LEN_MIN LIMIT 1;
SELECT  CITY, LENGTH(CITY) AS LEN_MAX FROM STATION ORDER BY LEN_MAX DESC LIMIT 1; 

11.
SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP '^[aeiouAEIOU]';

12.
SELECT DISTINCT CITY FROM STATION WHERE CITY REGEXP '[aeiouAEIOU]$';

13.
SELECT DISTINCT CITY FROM STATION WHERE CITY NOT REGEXP '^[aeiouAEIOU]';

14.
SELECT DISTINCT CITY FROM STATION WHERE CITY NOT REGEXP '[aeiouAEIOU]$';

15.
SELECT DISTINCT CITY FROM STATION WHERE CITY NOT REGEXP '^[aeiouAEIOU]' OR CITY NOT REGEXP '[aeiouAEIOU]$';

16.
SELECT DISTINCT CITY FROM STATION WHERE CITY NOT REGEXP '^[aeiouAEIOU]' AND CITY NOT REGEXP '[aeiouAEIOU]$';

17.
SELECT product_id, product_name
FROM Product
WHERE product_id NOT IN(SELECT product_id FROM Sales 
WHERE sale_date NOT BETWEEN '2019-01-01' and '2019-03-31');

18.
SELECT DISTINCT viewer_id
from Views WHERE viewer_id = author_id ORDER BY auhor_id;

19.
SELECT round(D2.im_orders*100/D1.del,2) 
FROM 
(SELECT count(delivery_id) as del FROM Delivery) D1,
(SELECT count(delivery_id) as im_orders FROM Delivery WHERE order_date = customer_pref_delivery_date) D2;

20.
select ad_id,
    ifnull(round(sum(action ='Clicked')/sum(action !='ignored') *100,2),0) ctr
from Ads
group by ad_id
order by ctr desc, ad_id;

21.
SELECT employee_id,
       COUNT(team_id) OVER(PARTITION BY team_id) AS team_size
FROM Employee ORDER BY employee_id;

22.
SELECT DISTINCT country_name,
CASE
WHEN (SUM(T.weather_state) OVER(PARTITION BY T.country_name)/COUNT(T.country_name) OVER(PARTITION BY T.country_name)) <= 15 THEN 'Cold'
WHEN (SUM(T.weather_state) OVER(PARTITION BY T.country_name)/COUNT(T.country_name) OVER(PARTITION BY T.country_name)) >= 25 THEN 'Hot'
ELSE 'Warm'
END AS weather_type 
FROM (SELECT C.country_name, W.*
FROM Weather W
INNER JOIN Countries C ON W.country_id = C.country_id WHERE day BETWEEN '2019-11-01' AND '2019-11-30') T;

23.
SELECT DISTINCT TEM.product_id,
round(SUM(TEM.price * TEM.units) OVER(PARTITION BY TEM.product_id)/
SUM(TEM.units) OVER(PARTITION BY TEM.product_id),2) AS average_price 
FROM (SELECT P.*, U.purchase_date, U.units
FROM Prices P
INNER JOIN UnitsSold U ON P.product_id = U.product_id WHERE U.purchase_date between P.start_date AND P.end_date) TEM;

24.
SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY player_id;

25.
SELECT player_id,(SELECT device_id FROM Activity WHERE event_date = TEM.first_login) AS device 
FROM(SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY player_id) TEM;

26.
SELECT P.product_name,sum(unit) as unit
FROM Orders O
INNER JOIN Products P ON O.product_id = P.product_id WHERE O.order_date between '2020-02-01' AND '2020-02-29' GROUP BY P.product_id
HAVING SUM(unit) >= 100;

27.

